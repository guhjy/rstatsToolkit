% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/plotForest.R
\name{plotForest}
\alias{plotForest}
\title{Forest plot}
\usage{
plotForest(data, coefficient = "estimate", y.axis.variables = "indep",
  confid.interval = c("conf.low", "conf.high"), pvalue.factor = NULL,
  groups = NULL, y.axis.label = "Exposures",
  x.axis.label = "Beta estimates")
}
\arguments{
\item{data}{Dataset for the forest plot.}

\item{coefficient}{The column that contains the beta
estimate/coefficient.}

\item{y.axis.variables}{The column with the exposure variables
that will be placed on the y-axis of the forest plot.}

\item{confid.interval}{A vector that contains the lower and
upper confidence interval.}

\item{pvalue.factor}{The column that contains the p-value in the
form of a factor variable (ie. with levels such as '>0.05' and
'<0.05').}

\item{groups}{The variable to split the plot up, as a formula
(var1 ~ var2, or ~ var2, etc).}

\item{y.axis.label}{The y-axis label.}

\item{x.axis.label}{The x-axis label.}
}
\value{
A forest plot
}
\description{
Generate a forest plot without the traditional side table.
}
\details{
Create a forest plot, with a dot and confidence line, though
without the usual side table that contains the raw data values.
If the \code{pvalue.factor} argument is supplied, the dots and
confidence lines increase in size and opacity as significance
increases.  If \code{groups} is also supplied, the forest plot
will be split up for each grouping.  Thus, a large amount of
information on the results can be provided in a fairly small
amount of space.
}
\examples{
\dontrun{
data(state)
ds <- data.frame(state.region, state.x77)
geefit <- loopGEE(ds, c('Income', 'Frost'), c('Population', 'Murder'), 'state.region')
  filter(term == 'independent') \%>\%
filtered <- dplyr::filter(geefit, term == 'independent')

plotForest(filtered)
plotForest(filtered, groups = ' ~ dep')
plotForest(filtered, pvalue.factor = 'f.pvalue', groups = ' ~ dep')
}
}
\author{
Luke W. Johnston
}

